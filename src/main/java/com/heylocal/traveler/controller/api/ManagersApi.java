/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.heylocal.traveler.controller.api;

import com.heylocal.traveler.controller.exception.NotFoundException;
import com.heylocal.traveler.dto.ErrorMessageResponse;
import com.heylocal.traveler.dto.ManagerDto.ManagerProfileResponse;
import com.heylocal.traveler.dto.ManagerDto.ManagerReviewResponse;
import com.heylocal.traveler.dto.PageDto.PageRequest;
import com.heylocal.traveler.dto.Sample;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-08-12T04:12:44.357Z[GMT]")
@RequestMapping("/managers")
public interface ManagersApi {

    @Operation(summary = "해당 매니저의 꿀팁노트 리스트 조회", description = "", tags = {"Managers"})
    @GetMapping(value = "/{managerId}/notes")
    ResponseEntity<Void> managersManagerIdNotesGet(
        @Parameter(in = ParameterIn.PATH, description = "매니저 id", required = true) @PathVariable long managerId,
        @Parameter(in = ParameterIn.QUERY, description = "조회할 페이지", required = true) @Validated @RequestParam int page);


    @Operation(summary = "해당 매니저의 꿀팁노트 상세 조회", description = "", tags = {"Managers"})
    @GetMapping(value = "/{managerId}/notes/{noteId}")
    ResponseEntity<Void> managersManagerIdNotesNoteIdGet(
        @Parameter(in = ParameterIn.PATH, description = "매니저 id", required = true) @PathVariable long managerId,
        @Parameter(in = ParameterIn.PATH, description = "조회할 꿀팁노트 id", required = true) @PathVariable long noteId);


    @Operation(summary = "해당 매니저의 프로필 조회", description = "", tags = {"Managers"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "404", description = "정보가 존재하지 않음", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageResponse.class)))
    })
    @GetMapping(value = "/{managerId}/profile")
    ManagerProfileResponse managersManagerIdProfileGet(
        @Parameter(in = ParameterIn.PATH, description = "매니저 id", required = true) @PathVariable long managerId,
        @Parameter(in = ParameterIn.QUERY, description = "간단한(상단 영역) 프로필 정보만 조회: true/false", required = true) @RequestParam boolean simple) throws NotFoundException;


    @Operation(summary = "해당 매니저에게 매니저 리뷰 등록", description = "", tags = {"Managers"})
    @PostMapping(value = "/{managerId}/reviews", consumes = { "application/json" })
    ResponseEntity<Void> managersManagerIdReviewsPost(
        @Parameter(in = ParameterIn.PATH, description = "매니저 id", required = true) @PathVariable long managerId,
        @Parameter(in = ParameterIn.DEFAULT, description = "매니저 리뷰 내용 + 리뷰할 여행 id", required = true) @Validated @RequestBody Sample body);

    @Operation(summary = "해당 매니저의 매니저 리뷰 조회", description = "", tags = {"Managers"})
    @GetMapping(value = "/{managerId}/reviews")
    List<ManagerReviewResponse> managersManagerReviews(
            @Parameter(in = ParameterIn.PATH, description = "매니저 id", required = true) @PathVariable long managerId,
            @Parameter(in = ParameterIn.QUERY, description = "페이지 + 한 페이지의 크기", required = true) PageRequest pageRequest);

}

