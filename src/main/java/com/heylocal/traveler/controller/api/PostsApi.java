/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.heylocal.traveler.controller.api;

import com.heylocal.traveler.dto.Sample;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-08-12T04:12:44.357Z[GMT]")
@RequestMapping("/posts")
public interface PostsApi {

    @Operation(summary = "테마 관련 포스트 리스트 조회", description = "")
    @GetMapping("/posts")
    ResponseEntity<Void> postsGet(
        @Parameter(in = ParameterIn.QUERY, description = "테마 id", required = true) @RequestParam long themeId,
        @Parameter(in = ParameterIn.QUERY, description = "시니어 매니저의 포스트만 조회 옵션: true/false", required = true) @RequestParam boolean onlySenior,
        @Parameter(in = ParameterIn.QUERY, description = "조회할 페이지 번호", required = true) @RequestParam int page);


    @Operation(summary = "포스트 상세 조회", description = "")
    @GetMapping("/{postId}")
    ResponseEntity<Void> postsPostIdGet(
        @Parameter(in = ParameterIn.PATH, description = "포스트 id", required = true) @PathVariable long postId);


    @Operation(summary = "해당 포스트에 관련된 방문 리뷰 리스트 조회", description = "")
    @GetMapping("/{postId}/visit-reviews")
    ResponseEntity<Void> postsPostIdVisitReviewsGet(
        @Parameter(in = ParameterIn.PATH, description = "포스트 id", required = true) @PathVariable long postId,
        @Parameter(in = ParameterIn.QUERY, description = "조회할 페이지 번호", required = true) @RequestParam int page);


    @Operation(summary = "해당 포스트에 방문 리뷰 등록", description = "")
    @PostMapping(value = "/{postId}/visit-reviews", consumes = { "application/json" })
    ResponseEntity<Void> postsPostIdVisitReviewsPost(
        @Parameter(in = ParameterIn.PATH, description = "포스트 id", required = true) @PathVariable long postId,
        @Parameter(in = ParameterIn.DEFAULT, description = "방문 리뷰 정보", required = true) @Validated @RequestBody Sample body);


    @Operation(summary = "해당 포스트의 자신의 방문 리뷰 삭제", description = "")
    @DeleteMapping("/{postId}/visit-reviews/{visitReviewId}")
    ResponseEntity<Void> postsPostIdVisitReviewsVisitReviewIdDelete(
        @Parameter(in = ParameterIn.PATH, description = "포스트 id", required = true) @PathVariable long postId,
        @Parameter(in = ParameterIn.PATH, description = "삭제할 방문리뷰 id", required = true) @PathVariable long visitReviewId);

}

