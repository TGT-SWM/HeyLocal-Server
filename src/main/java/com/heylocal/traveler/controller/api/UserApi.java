/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.heylocal.traveler.controller.api;

import com.heylocal.traveler.dto.Sample;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-08-12T04:12:44.357Z[GMT]")
@RequestMapping("/user")
public interface UserApi {

    @Operation(summary = "사용자가 남긴 매니저 평가 리스트 조회", description = "로그인한 사용자가 남긴 매니저 평가 리스트 조회", tags = {"User"})
    @GetMapping("/manager-reviews")
    ResponseEntity<Void> userManagerReviewsGet(
        @Parameter(in = ParameterIn.QUERY, description = "조회할 페이지 번호", required = true) @RequestParam int page);


    @Operation(summary = "사용자 푸쉬 알림 리스트 조회", description = "로그인한 사용자가 받은 모든 푸쉬 알림 리스트 조회", tags = {"User"})
    @GetMapping("/notifications")
    ResponseEntity<Void> userNotificationsGet();


    @Operation(summary = "사용자의 결제 내역과 남은 포인트 조회", description = "로그인한 사용자의 결제 내역과 남은 포인트 조회", tags = {"User"})
    @GetMapping("/payment")
    ResponseEntity<Void> userPaymentGet(
        @Parameter(in = ParameterIn.QUERY, description = "조회할 페이지 번호", required = true) @RequestParam int page);


    @Operation(summary = "사용자 프로필 사진, 닉네임 조회", description = "로그인한 사용자의 프로필 사진과 닉네임 조회", tags = {"User"})
    @GetMapping("/profile")
    ResponseEntity<Void> userProfileGet();


    @Operation(summary = "사용자 프로필 사진, 닉네임 수정", description = "로그인한 사용자 프로필 사진, 닉네임 수정", tags = {"User"})
    @PatchMapping(value = "/profile", consumes = { "application/json" })
    ResponseEntity<Void> userProfilePatch(
        @Parameter(in = ParameterIn.DEFAULT, description = "수정할 닉네임 or 수정할 사진", required = true) @Validated @RequestBody Sample body);


    @Operation(summary = "사용자가 남긴 방문 리뷰 리스트 조회", description = "로그인한 사용자가 남긴 방문 리뷰 리스트 조회", tags = {"User"})
    @GetMapping("/visit-reviews")
    ResponseEntity<Void> userVisitReviewsGet(
        @Parameter(in = ParameterIn.QUERY, description = "조회할 페이지 번호", required = true) @RequestParam int page);


    @Operation(summary = "회원탈퇴", description = "", tags = {"User"})
    @PostMapping("/withdrawal")
    ResponseEntity<Void> userWithdrawalPost();

}

